#include "Trace.h"


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CTrace> CTrace::Init(void)
{
	mapcTraces.Init();
	mpcNet = OMalloc<CTraceNet>(Ptr<CTrace>(this));
	return Ptr<CTrace>(this);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTrace::Free(void)
{
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTrace::Connect(Ptr<CTrace> pcTrace)
{
	mapcTraces.Add(pcTrace);
	pcTrace->mapcTraces.Add(this);

	Ptr<CArray<CTrace>> pacConnected = FindConnected();

	int iNumElements = pacConnected->NumElements();
	for (int i = 0; i < iNumElements; i++)
	{
		Ptr<CTrace> pcConnection = pacConnected->Get(i);
		pcConnection->SetNet(mpcNet);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CArray<CTrace>> CTrace::GetTraces(void)
{
	return Ptr<CArray<CTrace>>(&mapcTraces);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTrace::SetNet(Ptr<CTraceNet> pcNet)
{
	mpcNet = pcNet;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CArray<CTrace>> CTrace::FindConnected()
{
	CSet<CTrace> apcAllConnections;
	apcAllConnections.Init();

	CArray<CTrace> apcStack;
	apcStack.Init();

	apcStack.Add(Ptr<CTrace>(this));
	apcAllConnections.Add(Ptr<CTrace>(this));

	Recurse(Ptr<CSet<CTrace>>(&apcAllConnections), Ptr<CArray<CTrace>>(&apcStack));

	Ptr<CArray<CTrace>> p = OMalloc<CArray<CTrace>>();
	p->AddAll(&apcAllConnections);
	return p;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTrace::Recurse(Ptr<CSet<CTrace>> papcAllConnections, Ptr<CArray<CTrace>> papcStack)
{
	while (!papcStack->IsEmpty())
	{
		Ptr<CTrace> pcTrace = papcStack->Get(papcStack->Size() - 1);
		papcStack->RemoveAt(papcStack->Size() - 1);

		Ptr<CArray<CTrace>> papcTrces = pcTrace->GetTraces();
		int iNumElements = papcTrces->NumElements();
		for (int i = 0; i < iNumElements; i++)
		{
			Ptr<CTrace> pcConnection = papcTrces->Get(i);
			BOOL bAdded = papcAllConnections->Add(pcConnection);
			if (bAdded)
			{
				papcStack->Add(pcConnection);
			}
		}
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
ETraceValue CTrace::GetValue(void)
{
	if (mpcNet.IsNotNull())
	{
		return mpcNet->GetValue();
	}
	else
	{
		return TV_Unsettled;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
ETraceValue CTrace::UpdateNetValue(ETraceValue value, Ptr<CPort> pcPort)
{
	return mpcNet->Update(value, pcPort);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CTraceNet> CTrace::GetNet()
{
	return mpcNet;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CString> CTrace::ToString(void)
{
	ETraceValue value = mpcNet->GetValue();
	return  NULL;//StringUtil.toEnumString(value);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char CTrace::GetStringChar(void)
{
	return CTraceValue::GetCharValue(mpcNet->GetValue());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
Ptr<CPort> CTrace::Get_DEBUG_lastPortThatUpdated(void)
{
	if (mpcNet.IsNotNull())
	{
		return mpcNet->Get_DEBUG_lastPortThatUpdated();
	}
	else
	{
		return NULL;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CTrace::IsHigh(void)
{
	return mpcNet.IsNotNull() && CTraceValue::IsHigh(mpcNet->GetValue());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CTrace::IsError(void)
{
	return mpcNet.IsNotNull() && CTraceValue::IsError(mpcNet->GetValue());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CTrace::IsLow(void)
{
	return mpcNet.IsNotNull() && CTraceValue::IsLow(mpcNet->GetValue());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CTrace::IsUnsettled(void)
{
	return mpcNet.IsNotNull() && CTraceValue::IsUnsettled(mpcNet->GetValue());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CTrace::IsNotConnected(void)
{
	return mpcNet.IsNull();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CTrace::Class(void)
{
	Embedded(&mapcTraces, "mapcTraces");
	Pointer(mpcNet.This(), "mpcNet");
}


